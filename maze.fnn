(chain
    (show (adj end))
    (with-fn solve steps avoid
        nil)
    (with-fn adj pos
        (chain
            (adj-positions pos)
            (map wall-p)
            (map-idx
                (fun x i
                    (and (not x) (=/= i idx-backtracking))))
            (with idx-backtracking
                (chain pos (2a) (+ 2a) (((co 0a mod) 4a))))))
    (with-fn adj-positions pos
        (chain nil
            (: (mod-pos pos id -- id))
            (: (mod-pos pos ++ id id))
            (: (mod-pos pos id ++ id))
            (: (mod-pos pos -- id id))))
    (with-fn mod-pos pos x-fun y-fun a-fun
        (chain nil
            (: (a-fun (2a pos)))
            (: (y-fun (1a pos)))
            (: (x-fun (0a pos)))))
    (with-fn wall-p pos
        (chain
            (= (& row mask) 0a)
            (not)
            (with mask (<< $1a (++ (1a pos))))
            (with row ((0a pos) maze))))
    (with end `(15a 28a 1a)))
