(chain
    (show (map wall-p `(start `(0a 0a) end)))
    (with-fn solve steps avoid
        nil)
    (with-fn adj pos
        (chain
            (adj-positions pos)
            (map wall-p)
            (map-idx
                (fun x i
                    (or x (= i idx-backtracking))))
            (with idx-backtracking
                (chain pos (2a) (+ 2a) (mod 3)))))
    (with-fn adj-positions pos
        `(
            `((-- (0a pos)) (1a pos))
            `((0a pos) (++ (1a pos)))
            `((++ (0a pos)) (1a pos))
            `((0a pos) (-- (1a pos)))))
    (with-fn wall-p pos
        (chain
            (= (& row mask) 0a)
            (not)
            (with mask (<< $1a (++ (1a pos))))
            (with row ((0a pos) maze))))
    (with end `(15a 28a)))
