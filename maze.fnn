(chain nil
    (disc (println 'left maze at (15,30)'))
    (disc (println ''))
    (disc
        (loop
            (fun x (not (all= end x)))
            next-show
            start))
    (with-fn next-show pos-orig
        (chain pos-new
            (disc (show-coords pos-new))
            (disc (show-turn pos-new pos-orig))
            (with pos-new (next pos-orig))))
    (with-fn next pos
        (chain
            (fold
                (fun x a
                    (chain
                        (:
                            (chain nil
                                (: x)
                                (: (1a (x opts)))
                                (: (0a (x opts))))
                            (: #t nil))
                        (if (not (x ok)) a)
                        (if (1a a) a)
                        ))
                (: nil (: #f nil))
                order)
            (0a)
            (with ok (adj pos))
            (with opts (adj-positions pos))
            (with order (leftmost pos))))
    (with-fn show-coords pos
        (chain
            (print ~'(%x%,%y%) ')
            (with x (itoa (0a pos)))
            (with y (itoa (1a pos)))))
    (with-fn show-turn pos orig-pos
        (chain nil
            (if (= (2a pos) 0a) (println ' 90'))
            (if (= (2a pos) 1a) (println ' 0'))
            (if (= (2a pos) 2a) (println '-90'))
            (if (= (2a pos) 3a) (println ' 180'))
            (disc (print ' change angle to '))
            (disc (println ''))
            (if (= (2a pos) (2a orig-pos)) nil)))
    (with-fn leftmost pos
        (rot-right (+ 2a (2a pos)) (rev (range 4a))))
    (with-fn adj pos
        (chain
            (adj-positions pos)
            (map wall-p)
            (map not)))
    (with-fn adj-positions pos
        (chain nil
            (: (mod-pos pos id -- id))
            (: (mod-pos pos ++ id id))
            (: (mod-pos pos id ++ id))
            (: (mod-pos pos -- id id))))
    (with-fn mod-pos pos x-fun y-fun a-fun
        (chain nil
            (: (a-fun (2a pos)))
            (: (y-fun (1a pos)))
            (: (x-fun (0a pos)))))
    (with-fn wall-p pos
        (chain
            (= (& row mask) 0a)
            (not)
            (with mask (<< $1a (1a pos)))
            (with row ((0a pos) maze))))
    (with start
        (if (= (1a start) 0a)
            (chain nil
                (:
                    (chain nil
                        (if (= (2a start) 90a) 0a)
                        (if (= (2a start) 0a) 1a)
                        (if (= (2a start) -90a) 2a)
                        (if (= (2a start) 180a) 3a)))
                (: (1a start))
                (: (0a start)))
            start))
    (with end `(15a 29a 1a)))
